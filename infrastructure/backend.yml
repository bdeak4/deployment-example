---
- name: Upgrade system
  hosts: all
  become: true

  tasks:
    - name: Upgrade apt packages
      ansible.builtin.apt:
        upgrade: dist
        update_cache: true

    - name: Check if a reboot is needed
      ansible.builtin.stat:
        path: /var/run/reboot-required
        get_md5: false
      register: reboot_required_file

    - name: Reboot server
      ansible.builtin.reboot:
        msg: 'Reboot initiated by Ansible due to kernel updates'
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
      when: reboot_required_file.stat.exists

- name: Setup docker
  hosts: all
  become: true

  tasks:
    - name: Install repository dependencies
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
        update_cache: true

    - name: Add signing key
      ansible.builtin.apt_key:
        url: 'https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg'
        state: present

    - name: Add repository into sources list
      ansible.builtin.apt_repository:
        repo: 'deb [arch={{ deb_arch }}] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable'
        state: present
        filename: docker

    - name: Install docker
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present
        update_cache: true

    - name: Login to ghcr.io
      community.docker.docker_login:
        registry: ghcr.io
        username: '{{ ghcr_username }}'
        password: '{{ ghcr_password }}'

- name: Setup nginx
  hosts: all
  become: true

  tasks:
    - name: Install nginx
      ansible.builtin.apt:
        name: nginx
        state: present

    - name: Copy ssl certificate file
      ansible.builtin.copy:
        src: '{{ ssl_crt_file }}'
        dest: '/etc/ssl/{{ backend_domain }}.crt'
        mode: '644'

    - name: Copy ssl private key file
      ansible.builtin.copy:
        src: '{{ ssl_key_file }}'
        dest: '/etc/ssl/{{ backend_domain }}.key'
        mode: '644'

    - name: Copy nginx conf
      ansible.builtin.template:
        src: site.conf.j2
        dest: /etc/nginx/sites-enabled/{{ backend_domain }}
        mode: '0644'
      notify: Restart nginx

  handlers:
    - name: Restart nginx
      ansible.builtin.service:
        name: nginx
        state: restarted

- name: Run project
  hosts: all
  become: true

  tasks:
    - name: Run redis docker container
      community.docker.docker_container:
        name: redis
        pull: true
        image: redis:6
        restart_policy: on-failure
        network_mode: host

    - name: Copy config.env file
      ansible.builtin.copy:
        src: '{{ env_config_file }}'
        dest: '/home/{{ ansible_user }}/config.env'
        mode: '644'

    - name: Copy secrets.env file
      ansible.builtin.copy:
        src: '{{ env_secrets_file }}'
        dest: '/home/{{ ansible_user }}/secrets.env'
        mode: '644'

    - name: Concat files
      ansible.builtin.shell: |
        echo \# config.env                       >  /home/{{ ansible_user }}/.env
        cat /home/{{ ansible_user }}/config.env  >> /home/{{ ansible_user }}/.env
        echo                                     >> /home/{{ ansible_user }}/.env
        echo \# ------------------------------   >> /home/{{ ansible_user }}/.env
        echo                                     >> /home/{{ ansible_user }}/.env
        echo \# secrets.env                      >> /home/{{ ansible_user }}/.env
        cat /home/{{ ansible_user }}/secrets.env >> /home/{{ ansible_user }}/.env
      register: concat
      changed_when: concat.stdout != '' or concat.stderr != ''

    - name: Run backend docker container
      community.docker.docker_container:
        name: backend
        pull: true
        image: '{{ docker_image }}'
        restart_policy: on-failure
        restart_retries: 10
        network_mode: host
        env_file: '/home/{{ ansible_user }}/.env'

    - name: Prune old backend docker images
      ansible.builtin.shell: |
        if [ $(docker images -q "$(echo "{{ docker_image }}" | cut -d: -f1)" | tail -n +4 | wc -c) -ne 0 ]; then
          docker rmi -f $(docker images -q "$(echo "{{ docker_image }}" | cut -d: -f1)" | tail -n +4)
        fi
      register: prune
      changed_when: prune.stdout != '' or prune.stderr != ''
